<?xml version="1.0" encoding="UTF-8"?>
<beans xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans" xmlns:cache="http://www.springframework.org/schema/cache">


    <!-- 开启spring cache注解功能 -->
    <cache:annotation-driven cache-manager="cacheManager" />

    <!-- session 共享时需要开启 -->
    <!--<bean class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
        <property name="maxInactiveIntervalInSeconds" value="${redis.session.maxinactiveintervalinseconds}"/>
    </bean>-->

    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.pool.maxidle}" />
        <property name="minIdle" value="${redis.pool.minidle}" />
        <property name="maxWaitMillis" value="${redis.pool.maxwait}" />
        <property name="maxTotal" value="${redis.pool.maxtotal}" />
        <property name="testOnBorrow" value="${redis.pool.testonborrow}" />
        <property name="testOnReturn" value="${redis.pool.testonreturn}" />
    </bean>


    <!-- redis集群配置 哨兵模式 -->
    <bean id="sentinelConfiguration" class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
        <!-- master名称 sentinel.conf里面配置的主节点名称 -->
        <constructor-arg name="master" value="${redis.master.name}" />
        <!-- sentinel的ip和端口列表 -->
        <constructor-arg name="sentinelHostAndPorts">
            <set>
                <value>${redis.sentinel1}</value>
                <value>${redis.sentinel2}</value>
                <value>${redis.sentinel3}</value>
            </set>
        </constructor-arg>
    </bean>


    <!-- JedisConnectionFactory Cfg -->
    <bean id="connectionFactoryCfg" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" abstract="true">
        <property name="timeout" value="${redis.connection.timeout}"/>
        <property name="usePool" value="${redis.connection.usepool}"/>
        <property name="poolConfig" ref="poolConfig"/>
    </bean>

    <!-- redis主服务器中心 -->
    <bean id="redisConnectionFactory" parent="connectionFactoryCfg" >
        <constructor-arg name="sentinelConfig" ref="sentinelConfiguration"/>
        <property name="password" value="${redis.master.pwd}" />
    </bean>
    <!-- redis从服务器中心 -->
    <bean id="slaveRedisConnectionFactory" parent="connectionFactoryCfg" >
        <property name="port" value="${redis.slave.port}" />
        <property name="hostName" value="${redis.slave.host}" />
        <property name="password" value="${redis.slave.pwd}" />
    </bean>

    <!-- RedisTemplate Config-->
    <!-- Abstract RedisTemplate -->
    <bean id="redisTemplateCfg" abstract="true" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
    </bean>


    <!-- 主RedisTemplate -->
    <bean id="redisTemplate" parent="redisTemplateCfg">
        <property name="connectionFactory" ref="redisConnectionFactory" />
    </bean>
    <!-- 从RedisTemplate -->
    <bean id="slaveRedisTemplate" parent="redisTemplateCfg">
        <property name="connectionFactory" ref="slaveRedisConnectionFactory" />
    </bean>


    <!-- RedisCacheManager Cfg -->
    <!-- 主cacheManager 缓存 -->
    <bean name="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager" factory-method="create">
        <constructor-arg ref="redisConnectionFactory"/>
    </bean>
    <!-- 从cacheManager 缓存 -->
    <bean name="slaveCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager" factory-method="create">
        <constructor-arg ref="slaveRedisConnectionFactory"/>
    </bean>



    <!--声明消息侦听器容器 -->
    <bean id="messageListener" class="org.springframework.data.redis.listener.adapter.MessageListenerAdapter">
        <property name="delegate" ref="dataCollectorService"/>
    </bean>

    <bean id="redisContainer" class="org.springframework.data.redis.listener.RedisMessageListenerContainer">
        <property name="connectionFactory" ref="redisConnectionFactory"/>
        <property name="messageListeners">
            <map>
                <entry key-ref="messageListener">
                    <bean class="org.springframework.data.redis.listener.ChannelTopic">
                        <constructor-arg value="__keyevent@0__:expired"/>
                    </bean>
                </entry>
            </map>
        </property>
    </bean>


</beans>